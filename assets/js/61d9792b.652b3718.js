"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),p=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},i=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(d,".").concat(m)]||u[m]||c[m]||s;return n?o.createElement(g,a(a({ref:t},i),{},{components:n})):o.createElement(g,a({ref:t},i))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<s;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const s={slug:"/"},a="Getting Started",l={unversionedId:"getting-started-nxversion",id:"getting-started-nxversion",title:"Getting Started",description:"Welcome to the Workshop!",source:"@site/docs/getting-started-nxversion.md",sourceDirName:".",slug:"/",permalink:"/workshop-starter/",draft:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"tutorialSidebar",next:{title:"getting-started",permalink:"/workshop-starter/"}},d={},p=[{value:"Setup",id:"setup",level:2},{value:"Create NX workspace:",id:"create-nx-workspace",level:3},{value:"Setup Cypress",id:"setup-cypress",level:3},{value:"Create missions service and controller",id:"create-missions-service-and-controller",level:2},{value:"add todo",id:"add-todo",level:2},{value:"get single api",id:"get-single-api",level:3},{value:"add db reset for testing",id:"add-db-reset-for-testing",level:2},{value:"delete todo",id:"delete-todo",level:2},{value:"create service",id:"create-service",level:2}],i={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Welcome to the Workshop!"),(0,r.kt)("p",null,"This workshop covers cool stuff."),(0,r.kt)("p",null,"To get started, clone the repo and install the dependencies:"),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"create-nx-workspace"},"Create NX workspace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-nx-workspace@15.1.1 cypress-heroes --preset=angular-nest --appName=client --style=css --nxCloud false\n")),(0,r.kt)("p",null,"Open project in code"),(0,r.kt)("h3",{id:"setup-cypress"},"Setup Cypress"),(0,r.kt)("p",null,"Create api-tests cypress app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @nrwl/cypress:cypress-project api-tests --baseUrl=http://localhost:3333/api\n")),(0,r.kt)("p",null,"Add cypress-plugin-api in root angular-todos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=/",title:"/"},"npm i -D cypress-plugin-api\n")),(0,r.kt)("p",null,"Import plugin in support file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=apps/api-tests/src/support/e2e.ts",title:"apps/api-tests/src/support/e2e.ts"},"import 'cypress-plugin-api';\n")),(0,r.kt)("p",null,"Clean up base test and delete app.po.ts file"),(0,r.kt)("h2",{id:"create-missions-service-and-controller"},"Create missions service and controller"),(0,r.kt)("p",null,"Use NX Console to create a nest missions resource. Uncheck crud, select api for\napp, put app for directory, and select none for tests"),(0,r.kt)("p",null,"update service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@nestjs/common';\n\nconst defaultTodo = {\n  id: 1,\n  description: 'take out the trash',\n  complete: false,\n};\n\n@Injectable()\nexport class TodosService {\n  todos: Todo[] = [{ ...defaultTodo }];\n\n  getAll() {\n    return this.todos;\n  }\n}\n")),(0,r.kt)("p",null,"update controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Controller, Get } from '@nestjs/common';\nimport { TodosService } from './todos.service';\n\n@Controller('todos')\nexport class TodosController {\n  constructor(private readonly todosService: TodosService) {}\n\n  @Get()\n  getTodos() {\n    return this.todosService.getAll();\n  }\n}\n")),(0,r.kt)("p",null,"add client-e2e/src/api/todos.api.cy.ts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"describe('todos api', () => {\n  it('should get todos', () => {\n    cy.api('/todos').as('response');\n    cy.get('@response').its('status').should('equal', 200);\n  });\n});\n")),(0,r.kt)("p",null,"run cypress from client-e2e folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx cypress open\n")),(0,r.kt)("h2",{id:"add-todo"},"add todo"),(0,r.kt)("p",null,"update todoservice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable } from '@nestjs/common';\n\nexport interface Todo {\n  id?: number;\n  description: string;\n  complete: boolean;\n}\n\nconst defaultTodo: Todo = {\n  id: 1,\n  description: 'take out the trash',\n  complete: false,\n};\n\n@Injectable()\nexport class TodosService {\n  todos: Todo[] = [{ ...defaultTodo }];\n\n  getAll() {\n    return this.todos;\n  }\n\n  add(todo: Todo) {\n    const newId = Math.max(...this.todos.map((x) => x.id)) + 1;\n    todo.id = newId;\n    this.todos.push(todo);\n    return todo;\n  }\n}\n")),(0,r.kt)("p",null,"update controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Post()\naddTodo(@Body() todo: Todo) {\n  return this.todosService.add(todo);\n}\n")),(0,r.kt)("p",null,"add test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('can add todo', () => {\n  cy.api('POST', '/todos', {\n    description: 'test todo',\n    complete: false,\n  }).as('response');\n  cy.get('@response').its('status').should('equal', 201);\n  cy.get('@response').its('body').should('include', {\n    description: 'test todo',\n    complete: false,\n  });\n});\n")),(0,r.kt)("h3",{id:"get-single-api"},"get single api"),(0,r.kt)("p",null,"update service/controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//service\nget(id: number) {\n  const todo = this.todos.find(x => x.id === id);\n  return todo;\n}\n\n//controller\nget(id: number) {\n  const todo = this.todos.find(x => x.id === id);\n  return todo;\n}\n")),(0,r.kt)("p",null,"add test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should get single todo', () => {\n  cy.api('/todos/1').as('response');\n  cy.get('@response').its('status').should('equal', 200);\n});\n")),(0,r.kt)("p",null,"show no response is coming back, but the status code is 200. debug to show why."),(0,r.kt)("p",null,"update the controller get to use parse int pipe:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Get(':id')\ngetTodo(@Param('id', ParseIntPipe) id: number) {\n  return this.todosService.get(id);\n}\n")),(0,r.kt)("p",null,"Show it now works. However, show it still fails in the same way as before if we\npass an id that doesn't exist, like 100."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it.only('should  throw 404 if single todo is not found', () => {\n  cy.api({\n    url: '/todos/100',\n    failOnStatusCode: false,\n  }).as('response');\n  cy.get('@response').its('status').should('equal', 404);\n});\n")),(0,r.kt)("p",null,"Update the service to throw a NotFoundException"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"get(id: number) {\n  const todo = this.todos.find(x => x.id === id);\n  if (!todo) {\n    throw new NotFoundException();\n  }\n  return todo;\n}\n")),(0,r.kt)("h2",{id:"add-db-reset-for-testing"},"add db reset for testing"),(0,r.kt)("p",null,"service/controller"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Post('/reset')\nreset() {\n  this.todosService.reset();\n}\n\nreset() {\n  this.todos = [{...defaultTodo}];\n}\n")),(0,r.kt)("p",null,"explain how you would want to have better security around this"),(0,r.kt)("p",null,"add beforeeach to test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"beforeEach(() => {\n  cy.request({\n    method: 'POST',\n    url: '/todos/reset',\n    headers: {\n      Authorization: 'testadmin',\n    },\n  });\n});\n")),(0,r.kt)("h2",{id:"delete-todo"},"delete todo"),(0,r.kt)("p",null,"add controller/service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Delete(':id')\ndeleteTodo(@Param('id', ParseIntPipe) id: number) {\n  this.todosService.delete(id);\n}\n\ndelete(id: number) {\n  this.todos = this.todos.filter((x) => x.id !== id);\n}\n")),(0,r.kt)("p",null,"add test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('can delete todo', () => {\n  cy.api('DELETE', '/todos/1');\n  cy.api({\n    url: '/todos/1',\n    failOnStatusCode: false,\n  }).as('response');\n  cy.get('@response').its('status').should('equal', 404);\n});\n")),(0,r.kt)("h1",{id:"app-updates"},"App updates"),(0,r.kt)("p",null,"remove all the cruft from the app component, including nx component"),(0,r.kt)("h2",{id:"create-service"},"create service"),(0,r.kt)("p",null,"use vscode nx generator @scematics/angular:service\nname: todos, project: client, no flat, skipTests true"))}c.isMDXComponent=!0}}]);